/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ServicesRouteImport } from './routes/Services'
import { Route as ContactRouteImport } from './routes/Contact'
import { Route as IndexRouteImport } from './routes/index'

const ServicesRoute = ServicesRouteImport.update({
  id: '/Services',
  path: '/Services',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/Contact',
  path: '/Contact',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Contact': typeof ContactRoute
  '/Services': typeof ServicesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Contact': typeof ContactRoute
  '/Services': typeof ServicesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/Contact': typeof ContactRoute
  '/Services': typeof ServicesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/Contact' | '/Services'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/Contact' | '/Services'
  id: '__root__' | '/' | '/Contact' | '/Services'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContactRoute: typeof ContactRoute
  ServicesRoute: typeof ServicesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/Services': {
      id: '/Services'
      path: '/Services'
      fullPath: '/Services'
      preLoaderRoute: typeof ServicesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Contact': {
      id: '/Contact'
      path: '/Contact'
      fullPath: '/Contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContactRoute: ContactRoute,
  ServicesRoute: ServicesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
